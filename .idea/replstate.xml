<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1432032054581">{:repl-history {:ide [], :local [&quot;(def name \&quot;gongxingfa\&quot;)&quot; &quot;name&quot; &quot;(require '[programming-clojure.ch5 :reload-all])&quot; &quot;(require 'programming-clojure.ch5 :reload)&quot; &quot;(require 'programming-clojure.ch5 :as ch5 :reload)&quot; &quot;(require 'programming-clojure.ch5 :reload :as ch5)&quot; &quot;(require '[ programming-clojure.ch5 :reload :as ch5])&quot; &quot;(use '[ programming-clojure.ch5 :reload])&quot; &quot;messages&quot; &quot;(add-message (-&gt;Message \&quot;gongxingfa\&quot; \&quot;Hello World\&quot;))&quot; &quot;(use 'programming-clojure.ch5 :reload)&quot; &quot;(add-message \&quot;Message\&quot;)&quot; &quot;(add-message (-&gt;Message \&quot;zhangsan\&quot; \&quot;How are you\&quot;))&quot; &quot;(def current-track (atom \&quot;Venus, the Bringer of Peace\&quot;))&quot; &quot;(def current-track (atom {:title \&quot;Credo\&quot; :composer \&quot;Byrd\&quot;}))&quot; &quot;(reset! current-track {:title \&quot;Spem in Alium\&quot; :composer \&quot;Tallis\&quot;})&quot; &quot;(doc assoc)&quot; &quot;(assoc {:name \&quot;zhangsan\&quot; :age 20} :age 22)&quot; &quot;(def counter (agent 0))&quot; &quot;(send counter inc)&quot; &quot;(def counter (agent 0 :validator number?))&quot; &quot;(send counter (fn [_] \&quot;boo\&quot;))&quot; &quot;@counter&quot; &quot;(doc send)&quot; &quot;(doc send-off)&quot; &quot;(doc neg?)&quot; &quot;(doc -&gt;)&quot; &quot;(doc condp)&quot; &quot;(require '[programming-clojure.ch6 :reload])&quot; &quot;(require 'programming-clojure.ch6)&quot; &quot;(require 'programming-clojure.ch6 :reload)&quot; &quot;(def vault (CryptoVault \&quot;valur-file\&quot; \&quot;keystore\&quot; \&quot;toomanysecrets\&quot;))&quot; &quot;(def vault (-&gt;CryptoVault \&quot;valur-file\&quot; \&quot;keystore\&quot; \&quot;toomanysecrets\&quot;))&quot; &quot;(-&gt;CryptoVault \&quot;vault-file\&quot; \&quot;keystore\&quot; \&quot;toomanysecrets\&quot;)&quot; &quot;(use 'programming-clojure.ch6)&quot; &quot;(def vault (-&gt;CryptoVault \&quot;vault-file\&quot; \&quot;keystore\&quot; \&quot;toomanysecrets\&quot;))&quot; &quot;(init-vault vault)&quot; &quot;(expectorate vault \&quot;This is a test\&quot;)&quot; &quot;(gulp vault)&quot;], :remote []}}</component>
</project>